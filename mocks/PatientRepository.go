// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/jieqiboh/sothea_backend/entities"
	mock "github.com/stretchr/testify/mock"
)

// PatientRepository is an autogenerated mock type for the PatientRepository type
type PatientRepository struct {
	mock.Mock
}

// DeletePatientByID provides a mock function with given fields: ctx, id
func (_m *PatientRepository) DeletePatientByID(ctx context.Context, id int32) (int32, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePatientByID")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (int32, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) int32); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAdmin provides a mock function with given fields: ctx
func (_m *PatientRepository) GetAllAdmin(ctx context.Context) ([]entities.PartAdmin, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAdmin")
	}

	var r0 []entities.PartAdmin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entities.PartAdmin, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entities.PartAdmin); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.PartAdmin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPatientByID provides a mock function with given fields: ctx, id
func (_m *PatientRepository) GetPatientByID(ctx context.Context, id int32) (*entities.Patient, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPatientByID")
	}

	var r0 *entities.Patient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (*entities.Patient, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) *entities.Patient); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Patient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertPatient provides a mock function with given fields: ctx, patient
func (_m *PatientRepository) InsertPatient(ctx context.Context, patient *entities.Patient) (int32, error) {
	ret := _m.Called(ctx, patient)

	if len(ret) == 0 {
		panic("no return value specified for InsertPatient")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Patient) (int32, error)); ok {
		return rf(ctx, patient)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Patient) int32); ok {
		r0 = rf(ctx, patient)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.Patient) error); ok {
		r1 = rf(ctx, patient)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchPatients provides a mock function with given fields: ctx, search
func (_m *PatientRepository) SearchPatients(ctx context.Context, search string) ([]entities.PartAdmin, error) {
	ret := _m.Called(ctx, search)

	if len(ret) == 0 {
		panic("no return value specified for SearchPatients")
	}

	var r0 []entities.PartAdmin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entities.PartAdmin, error)); ok {
		return rf(ctx, search)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entities.PartAdmin); ok {
		r0 = rf(ctx, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.PartAdmin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePatientByID provides a mock function with given fields: ctx, id, patient
func (_m *PatientRepository) UpdatePatientByID(ctx context.Context, id int32, patient *entities.Patient) (int32, error) {
	ret := _m.Called(ctx, id, patient)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePatientByID")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, *entities.Patient) (int32, error)); ok {
		return rf(ctx, id, patient)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, *entities.Patient) int32); ok {
		r0 = rf(ctx, id, patient)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, *entities.Patient) error); ok {
		r1 = rf(ctx, id, patient)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPatientRepository creates a new instance of PatientRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPatientRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PatientRepository {
	mock := &PatientRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
